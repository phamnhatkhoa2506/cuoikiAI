Breadth First Search (BFS) Algorithm Description
=============================================

1. Algorithm Overview
--------------------
The BFS algorithm is implemented for maze solving with the following key components:
- Queue-based exploration
- Level-by-level search
- Parent pointer tracking
- Path reconstruction
- Visited set for cycle prevention

2. Core Components
-----------------
a) BFS Function:
   - Parameters:
     * maze: The maze structure
     * start: Starting position
     * goal: Target position
   - Returns: List of moves forming the path

b) Data Structures:
   - Queue: For level-by-level exploration
   - Visited Set: To track explored nodes
   - Parent Dictionary: To reconstruct path
   - Path List: Final solution path

3. Search Process
----------------
1. Initialize data structures:
   - Add start node to queue
   - Add start to visited set
   - Set start's parent to None

2. Main loop:
   - Dequeue current node
   - If current is goal, reconstruct path
   - For each neighbor:
     * Skip if already visited
     * Add to visited set
     * Set parent pointer
     * Add to queue

4. Path Reconstruction
---------------------
1. Start at goal node
2. Follow parent pointers back to start
3. Reverse path to get start-to-goal order
4. Return complete path

5. Key Features
--------------
- Guaranteed shortest path
- Complete exploration
- No heuristic required
- Simple implementation
- Memory efficient

6. Performance Considerations
---------------------------
- Time complexity: O(|V| + |E|)
  * |V| = number of vertices
  * |E| = number of edges
- Space complexity: O(|V|)
- Queue operations: O(1)
- Path reconstruction: O(path length)

7. Advantages
------------
- Always finds shortest path
- No need for heuristics
- Simple to implement
- Complete exploration
- Memory efficient
- Predictable behavior

8. Limitations
-------------
- Explores all nodes at current depth
- May explore unnecessary nodes
- No direction bias
- Can be slower than A* for large mazes
- Memory usage scales with maze size

9. Use Cases
-----------
Best suited for:
- Finding shortest paths
- When path length is critical
- Small to medium mazes
- When simplicity is important
- When memory is limited

10. Implementation Details
-------------------------
a) Move Class:
   - x, y coordinates
   - Hashable for set operations
   - Equality comparison
   - Copy functionality

b) Maze Class:
   - Grid representation
   - Move validation
   - Direction handling
   - Boundary checking

c) Game Class:
   - Pygame visualization
   - Path tracking
   - Move animation
   - State management

11. Visual Features
------------------
- White: Unvisited paths
- Yellow: Visited cells
- Green: Start position
- Red: Goal position
- Blue: Current position
- Black: Walls
- Gray: Explored cells

12. Game Flow
------------
1. Initialize maze and positions
2. Find complete path using BFS
3. Animate movement along path
4. Track visited cells
5. Stop at goal or path completion

13. Error Handling
----------------
- Checks for valid moves
- Handles no-path scenarios
- Provides warning messages
- Graceful termination
- Queue underflow protection

14. Comparison with Other Algorithms
----------------------------------
Advantages over Minimax:
- Simpler implementation
- Guaranteed shortest path
- No need for depth limiting
- More memory efficient
- Faster for most cases

Advantages over A*:
- No heuristic required
- Simpler to implement
- More predictable
- Better for small mazes
- Complete exploration

15. Optimization Features
-----------------------
- Efficient queue operations
- Early goal detection
- Path caching
- Visited set for cycle prevention
- Parent pointer tracking 